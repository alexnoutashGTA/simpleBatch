package report;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.logging.*;

public class reportBatchProcessor {

	public static void main(String[] args) {
		setRunReportProcessors();
	}
	
	private static void setRunReportProcessors() {
		try {
			File configFile = new File("resource\\application.properties");
		    FileReader reader = new FileReader(configFile);
		    Properties props = new Properties();
		    props.load(reader);
		    String loggerFolder = props.getProperty("logFolder");
		    setLogger(loggerFolder+"reportLog.xml");
		    log.log(Level.INFO,"Report batch started");
		    String host = props.getProperty("dbHost");
		    String user = props.getProperty("dbUser");
		    String password = props.getProperty("dbPassword");
		    String outputFolder = props.getProperty("outputFolder");
		    String stpName = props.getProperty("dbStp");
		    reader.close();
		    generateReportFromDB(host,user,password,stpName, outputFolder);
		} catch (FileNotFoundException ex) {
			 log.log(Level.SEVERE,"Property file is not found:"+ex.getMessage());
		   
		} catch (IOException ex) {
			 log.log(Level.SEVERE,"Error while reading property file:"+ex.getMessage());
		   
		} catch (ClassNotFoundException e) {
			log.log(Level.SEVERE,"Error while loading JDBC:"+e.getMessage());
		}
		finally {
			log.log(Level.INFO,"Report batch ended");
		}
	}

	private static void generateReportFromDB(String host, String userName, String password, String stp, String folderName) throws ClassNotFoundException {
		Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
		PrintWriter reportWriter = null;
		try {
		   Connection con = DriverManager.getConnection(host,userName,password);
	       con.setAutoCommit(false); 
	       String SPsql = "EXEC "+stp;   
		   PreparedStatement ps = con.prepareStatement(SPsql);
		   ps.setEscapeProcessing(true);
		   ps.setQueryTimeout(30);
		   ResultSet rs = ps.executeQuery();
		   FileWriter fw = new FileWriter(folderName+today+"report.csv");
	       BufferedWriter bw = new BufferedWriter(fw);
	       reportWriter = new PrintWriter(bw);
	       writeHeader(reportWriter);
	       while (rs.next()) {  
	    	   reportWriter.print(rs.getString("worklistSupplementalData"));
	    	   reportWriter.print(",");
	    	   reportWriter.print(rs.getString("accountNumber"));
	    	   reportWriter.print(",");
	    	   reportWriter.print(rs.getString("submittedDate"));
	    	   reportWriter.print(",");
	    	   reportWriter.print(rs.getString("status"));
	    	   reportWriter.print(",");
	    	   reportWriter.print(rs.getString("lastUpdate"));
	    	   reportWriter.print(",");
	    	   reportWriter.print(rs.getString("SLACategoryName"));	     
	    	   reportWriter.println(" ");
	    	}
	       con.close();
	    }		
		catch (SQLException e) { 
		   log.log(Level.SEVERE,"SQL Exception:"+e.getMessage());
		}
		
	    catch (IOException e) {
	    	log.log(Level.SEVERE,"IO Exception:"+e.getMessage());
	    }
	    catch (Exception e) {
	    	log.log(Level.SEVERE,"General Exception:"+e.getMessage());
		}
		finally {
			if (reportWriter!=null) {
				reportWriter.flush();
				reportWriter.close();
			}
		}
	}
	
	private static void writeHeader(PrintWriter reportWriter) {
	   reportWriter.print("worklistSupplementalData");
  	   reportWriter.print(",");
  	   reportWriter.print("accountNumber");
  	   reportWriter.print(",");
  	   reportWriter.print("submittedDate");
  	   reportWriter.print(",");
  	   reportWriter.print("status");
  	   reportWriter.print(",");
  	   reportWriter.print("lastUpdate");
  	   reportWriter.print(",");
  	   reportWriter.print("SLACategoryName");	     
  	   reportWriter.println(" ");
	}
	
	private static void setLogger(String logFolder) {
		try {
			FileHandler fh = new FileHandler(logFolder,true);
			fh.setLevel(Level.ALL);
			fh.setFormatter(new XMLFormatter());
			log.addHandler(fh);	
		} 
		catch (SecurityException | IOException e) {
		}   
	}
	
	private static final Logger log = Logger.getLogger("reportBatchProcessor");
	private static final Date today = Calendar.getInstance().getTime();
}

